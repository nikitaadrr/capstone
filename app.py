{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b72655e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.impute import KNNImputer\n",
    "import streamlit as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ea127eb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hotel_Name</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Score</th>\n",
       "      <th>Number_Reviews</th>\n",
       "      <th>Price</th>\n",
       "      <th>Room_Type</th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adina Apartment Hotel Melbourne Flinders Street</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>8.8</td>\n",
       "      <td>2,334</td>\n",
       "      <td>183</td>\n",
       "      <td>Premier One-Bedroom Apartment</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Adina Apartment Hotel Melbourne Southbank</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>8.7</td>\n",
       "      <td>6,368</td>\n",
       "      <td>133</td>\n",
       "      <td>Studio Apartment - King</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Atlantis Hotel Melbourne</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>8.3</td>\n",
       "      <td>10,290</td>\n",
       "      <td>86</td>\n",
       "      <td>Executive Queen Suite</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Avani Melbourne Jazz Corner Residences</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>8.5</td>\n",
       "      <td>1,339</td>\n",
       "      <td>114</td>\n",
       "      <td>Studio</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brady Apartment Hotel Flinders Street</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>8.4</td>\n",
       "      <td>2,938</td>\n",
       "      <td>98</td>\n",
       "      <td>Studio Apartment</td>\n",
       "      <td>Melbourne</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        Hotel_Name     Rating  Score  \\\n",
       "0  Adina Apartment Hotel Melbourne Flinders Street  Excellent    8.8   \n",
       "1        Adina Apartment Hotel Melbourne Southbank  Excellent    8.7   \n",
       "2                         Atlantis Hotel Melbourne  Very Good    8.3   \n",
       "3           Avani Melbourne Jazz Corner Residences  Very Good    8.5   \n",
       "4            Brady Apartment Hotel Flinders Street  Very Good    8.4   \n",
       "\n",
       "  Number_Reviews Price                      Room_Type       City    Country  \n",
       "0          2,334   183  Premier One-Bedroom Apartment  Melbourne  Australia  \n",
       "1          6,368   133        Studio Apartment - King  Melbourne  Australia  \n",
       "2         10,290    86          Executive Queen Suite  Melbourne  Australia  \n",
       "3          1,339   114                         Studio  Melbourne  Australia  \n",
       "4          2,938    98               Studio Apartment  Melbourne  Australia  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/Users/nikitaandrea/Downloads/global-hotels.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a78d6677",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Menghapus koma dari kolom 'Number_Reviews' dan mengubahnya menjadi integer\n",
    "df['Number_Reviews'] = df['Number_Reviews'].replace({',': ''}, regex=True).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4eca8874",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Simpan dulu salinan asli Room_Type\n",
    "df['Room_Type_original'] = df['Room_Type']\n",
    "\n",
    "# Deteksi baris yang salah (Price bukan angka DAN Room_Type kosong)\n",
    "mask_misplaced = df['Price'].str.contains('[a-zA-Z]', na=False) & df['Room_Type'].isna()\n",
    "\n",
    "# Pindahkan isian 'salah' dari Price ke Room_Type\n",
    "df.loc[mask_misplaced, 'Room_Type'] = df.loc[mask_misplaced, 'Price']\n",
    "\n",
    "# Kosongkan Price pada baris yang sebelumnya salah\n",
    "df.loc[mask_misplaced, 'Price'] = np.nan\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "00ed5c15",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bersihkan Price (hapus karakter non-angka)\n",
    "df['Price'] = df['Price'].str.replace(r'[^\\d.]', '', regex=True)\n",
    "\n",
    "# Ubah jadi float\n",
    "df['Price'] = pd.to_numeric(df['Price'], errors='coerce')  # errors='coerce' ganti yang gagal jadi NaN\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ffa6a370",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(columns=['Room_Type_original'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "36606302",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>183.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>133.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>114.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>373.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>251.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1006</th>\n",
       "      <td>535.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007</th>\n",
       "      <td>210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1008</th>\n",
       "      <td>179.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1009 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Price\n",
       "0     183.0\n",
       "1     133.0\n",
       "2      86.0\n",
       "3     114.0\n",
       "4      98.0\n",
       "...     ...\n",
       "1004  373.0\n",
       "1005  251.0\n",
       "1006  535.0\n",
       "1007  210.0\n",
       "1008  179.0\n",
       "\n",
       "[1009 rows x 1 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Salin dataframe\n",
    "df_knn = df.copy()\n",
    "\n",
    "# Encode kolom kategori untuk KNN\n",
    "label_encoders = {}\n",
    "categorical_cols = ['Hotel_Name', 'Rating', 'Room_Type', 'City', 'Country']\n",
    "\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df_knn[col] = le.fit_transform(df_knn[col].astype(str))  # pastikan tidak error di NaN\n",
    "    label_encoders[col] = le\n",
    "\n",
    "# Imputer\n",
    "imputer = KNNImputer(n_neighbors=5)\n",
    "df_knn_imputed = pd.DataFrame(imputer.fit_transform(df_knn), columns=df_knn.columns)\n",
    "\n",
    "# Kembalikan label kategori ke bentuk semula\n",
    "for col in categorical_cols:\n",
    "    df_knn_imputed[col] = label_encoders[col].inverse_transform(df_knn_imputed[col].astype(int))\n",
    "\n",
    "# Lihat nilai Price yang sudah terisi\n",
    "df_knn_imputed[['Price']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "feabf07d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# Normalisasi fitur numerik\n",
    "scaler = MinMaxScaler()\n",
    "numerical_features = df_knn_imputed[['Score', 'Number_Reviews', 'Price']]\n",
    "numerical_scaled = scaler.fit_transform(numerical_features)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2b0ac02d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gabungkan fitur-fitur menjadi satu kolom\n",
    "df_knn_imputed['combined_features'] = (\n",
    "    df_knn_imputed['Rating'].astype(str)        + ' ' +\n",
    "    df_knn_imputed['Score'].astype(str)         + ' ' +\n",
    "    df_knn_imputed['Number_Reviews'].astype(int).astype(str) + ' ' +\n",
    "    df_knn_imputed['Room_Type'].astype(str)     + ' ' +\n",
    "    df_knn_imputed['City'].astype(str)          + ' ' +\n",
    "    df_knn_imputed['Country'].astype(str)\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "88124c55",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "# TF-IDF Vectorization\n",
    "tfidf = TfidfVectorizer(stop_words='english')\n",
    "tfidf_matrix = tfidf.fit_transform(df_knn_imputed['combined_features'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "406ca953",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.sparse import hstack\n",
    "\n",
    "# Gabungkan matriks TF-IDF dengan fitur numerik\n",
    "final_features = hstack([tfidf_matrix, numerical_scaled])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b1279b71",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "def recommend_by_pref(df_knn_imputed, tfidf, scaler, final_features,\n",
    "                      rating, score, number_reviews, price_range, top_n=5):\n",
    "    \"\"\"\n",
    "    rating         : rating text (string), misalnya \"Very Good\"\n",
    "    score          : skor hotel (float), misalnya 8.5\n",
    "    number_reviews : jumlah review (int), misalnya 1200\n",
    "    price_range    : tuple (min_price, max_price)\n",
    "    top_n          : jumlah rekomendasi yang ingin ditampilkan\n",
    "    \"\"\"\n",
    "\n",
    "    # 1. Ubah rating text menjadi vektor menggunakan TF-IDF\n",
    "    pref_text = f\"{rating}\"\n",
    "    pref_tfidf = tfidf.transform([pref_text])\n",
    "\n",
    "    # 2. Normalisasi preferensi numerik\n",
    "    avg_price = sum(price_range) / 2\n",
    "    pref_num = scaler.transform([[score, number_reviews, avg_price]])\n",
    "\n",
    "    # 3. Gabungkan vektor TF-IDF dan numerik\n",
    "    pref_vec = hstack([pref_tfidf, pref_num])\n",
    "\n",
    "    # 4. Hitung cosine similarity\n",
    "    sims = cosine_similarity(pref_vec, final_features).flatten()\n",
    "\n",
    "    # 5. Tambahkan skor kemiripan ke DataFrame\n",
    "    df_knn_imputed['sim_score'] = sims\n",
    "\n",
    "    # 6. Filter berdasarkan rentang harga\n",
    "    df_filtered = df_knn_imputed[df_knn_imputed['Price'].between(*price_range)]\n",
    "\n",
    "    # 7. Urutkan berdasarkan skor kemiripan dan kembalikan top N rekomendasi\n",
    "    df_sorted = df_filtered.sort_values(by='sim_score', ascending=False)\n",
    "\n",
    "    return df_sorted.head(top_n)[\n",
    "        ['Hotel_Name', 'City', 'Room_Type', 'Rating', 'Score', 'Number_Reviews', 'Price', 'sim_score']\n",
    "    ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "681d5ac9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-23 22:26:24.968 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run /opt/anaconda3/lib/python3.12/site-packages/ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "# Streamlit UI untuk input pengguna\n",
    "st.title('Hotel Recommendation System')\n",
    "\n",
    "rating = st.selectbox('Rating:', ['Very Good', 'Good', 'Excellent', 'Fair'])\n",
    "score = st.slider('Score:', min_value=0.0, max_value=10.0, value=8.5)\n",
    "number_reviews = st.number_input('Number of Reviews:', min_value=0, value=500)\n",
    "min_price = st.number_input('Minimum Price:', min_value=0, value=100)\n",
    "max_price = st.number_input('Maximum Price:', min_value=0, value=300)\n",
    "\n",
    "# Tombol rekomendasi\n",
    "if st.button('Get Recommendations'):\n",
    "    recommendations = recommend_by_pref(\n",
    "        df_knn_imputed=df_knn_imputed,\n",
    "        tfidf=tfidf,\n",
    "        scaler=scaler,\n",
    "        final_features=final_features,\n",
    "        rating=rating,\n",
    "        score=score,\n",
    "        number_reviews=number_reviews,\n",
    "        price_range=(min_price, max_price),\n",
    "        top_n=5\n",
    "    )\n",
    "    st.write('Top 5 Recommended Hotels:')\n",
    "    st.dataframe(recommendations)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
